(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{ACoY:function(t,e,i){"use strict";i.d(e,"a",function(){return s});const s=i("CQbg").b`
  .field {
    margin: 10px 0;
    font-family: 'IBM Plex Sans', sans-serif;
  }

  .field input,
  .field textarea,
  .field select {
    box-sizing: border-box;
    margin-top: 6px;
    display: inline-block;
    padding: 6px 4px;
    border-radius: 2px;
    background: transparent;
    border: 1px solid #666;
  }

  .field input,
  .field textarea {
    width: 100%;
  }

  .field input:focus,
  .field textarea:focus,
  .field select:focus {
    outline: 1px solid #666;
  }

  .label {
    font-size: 0.9rem;
  }
`},"RWR+":function(t,e,i){"use strict";i.r(e);var s=i("CQbg"),a=i("gvQ4");customElements.define("ez-admin",class extends s.a{render(){return s.c`
      <style>
        :host {
          display: block;
        }
      </style>
      <ez-page>
        <section class="section">
          <h1 class="title">Admin</h1>
          <a
            class="button is-primary block"
            href="/admin/draft"
            title="Start writing"
            @click=${Object(a.a)("/admin/draft")}
          >
            Start a new draft
          </a>
        </section>
        <ez-article-feed adminMode=${!0}></ez-article-feed>
      </ez-page>
    `}});var n=i("AaG5");
/**
@license
Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/const r=t=>e=>(class extends e{connectedCallback(){super.connectedCallback&&super.connectedCallback(),this._storeUnsubscribe=t.subscribe(()=>this.stateChanged(t.getState())),this.stateChanged(t.getState())}disconnectedCallback(){this._storeUnsubscribe(),super.disconnectedCallback&&super.disconnectedCallback()}stateChanged(t){}});
/**
@license
Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
var c=i("K9Ia"),o=i("mrSG"),l=i("FFOo");function u(t,e){return function(i){return i.lift(new d(t,e))}}var d=function(){function t(t,e){this.compare=t,this.keySelector=e}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.compare,this.keySelector))},t}(),h=function(t){function e(e,i,s){var a=t.call(this,e)||this;return a.keySelector=s,a.hasKey=!1,"function"==typeof i&&(a.compare=i),a}return o.b(e,t),e.prototype.compare=function(t,e){return t===e},e.prototype._next=function(t){var e;try{var i=this.keySelector;e=i?i(t):t}catch(t){return this.destination.error(t)}var s=!1;if(this.hasKey)try{s=(0,this.compare)(this.key,e)}catch(t){return this.destination.error(t)}else this.hasKey=!0;s||(this.key=e,this.destination.next(t))},e}(l.a),p=i("+umK"),b=i("2Bdj");function f(t,e,i){return function(s){return s.lift(new g(t,e,i))}}var g=function(){function t(t,e,i){this.nextOrObserver=t,this.error=e,this.complete=i}return t.prototype.call=function(t,e){return e.subscribe(new m(t,this.nextOrObserver,this.error,this.complete))},t}(),m=function(t){function e(e,i,s,a){var n=t.call(this,e)||this;return n._tapNext=p.a,n._tapError=p.a,n._tapComplete=p.a,n._tapError=s||p.a,n._tapComplete=a||p.a,Object(b.a)(i)?(n._context=n,n._tapNext=i):i&&(n._context=i,n._tapNext=i.next||p.a,n._tapError=i.error||p.a,n._tapComplete=i.complete||p.a),n}return o.b(e,t),e.prototype._next=function(t){try{this._tapNext.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.next(t)},e.prototype._error=function(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)},e.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()},e}(l.a),v=i("h9Dq"),x=new(i("CS9Q").a)(v.a);function y(t,e){return void 0===e&&(e=x),function(i){return i.lift(new w(t,e))}}var w=function(){function t(t,e){this.dueTime=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new C(t,this.dueTime,this.scheduler))},t}(),C=function(t){function e(e,i,s){var a=t.call(this,e)||this;return a.dueTime=i,a.scheduler=s,a.debouncedSubscription=null,a.lastValue=null,a.hasValue=!1,a}return o.b(e,t),e.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(k,this.dueTime,this))},e.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},e.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},e.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},e}(l.a);function k(t){t.debouncedNext()}var S=i("/PH2"),j=i("VnD/");var $=function(){function t(t){this.predicate=t}return t.prototype.call=function(t,e){return e.subscribe(new O(t,this.predicate))},t}(),O=function(t){function e(e,i){var s=t.call(this,e)||this;return s.predicate=i,s.skipping=!0,s.index=0,s}return o.b(e,t),e.prototype._next=function(t){var e=this.destination;this.skipping&&this.tryCallPredicate(t),this.skipping||e.next(t)},e.prototype.tryCallPredicate=function(t){try{var e=this.predicate(t,this.index++);this.skipping=Boolean(e)}catch(t){this.destination.error(t)}},e}(l.a);function _(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}_.prototype=Object.create(Error.prototype);var q=_,P=i("G5J1");function D(t){return function(e){return 0===t?Object(P.a)():e.lift(new M(t))}}var M=function(){function t(t){if(this.total=t,this.total<0)throw new q}return t.prototype.call=function(t,e){return e.subscribe(new R(t,this.total))},t}(),R=function(t){function e(e,i){var s=t.call(this,e)||this;return s.total=i,s.count=0,s}return o.b(e,t),e.prototype._next=function(t){var e=this.total,i=++this.count;i<=e&&(this.destination.next(t),i===e&&(this.destination.complete(),this.unsubscribe()))},e}(l.a);var T=i("60iU");function E(t,e){void 0===e&&(e=x);var i,s=(i=t)instanceof Date&&!isNaN(+i)?+t-e.now():Math.abs(t);return function(t){return t.lift(new N(s,e))}}var N=function(){function t(t,e){this.delay=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new U(t,this.delay,this.scheduler))},t}(),U=function(t){function e(e,i,s){var a=t.call(this,e)||this;return a.delay=i,a.scheduler=s,a.queue=[],a.active=!1,a.errored=!1,a}return o.b(e,t),e.dispatch=function(t){for(var e=t.source,i=e.queue,s=t.scheduler,a=t.destination;i.length>0&&i[0].time-s.now()<=0;)i.shift().notification.observe(a);if(i.length>0){var n=Math.max(0,i[0].time-s.now());this.schedule(t,n)}else this.unsubscribe(),e.active=!1},e.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(e.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},e.prototype.scheduleNotification=function(t){if(!0!==this.errored){var e=this.scheduler,i=new z(e.now()+this.delay,t);this.queue.push(i),!1===this.active&&this._schedule(e)}},e.prototype._next=function(t){this.scheduleNotification(T.a.createNext(t))},e.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.scheduleNotification(T.a.createComplete()),this.unsubscribe()},e}(l.a),z=function(){return function(t,e){this.time=t,this.notification=e}}(),V=i("tSTB"),B=i("5W9+"),F=i("QQaa"),I=i("ACoY"),A=i("ibZA"),Q=i("YpuI"),K=i("fhiS"),L=i("6iyJ");customElements.define("ez-draft",class extends(r(B.a)(s.a)){constructor(){super(...arguments),this.markdownChangeSubject=new c.a,this.updateChangeSubject=new c.a,this.stateSubject=new c.a,this.state$=this.stateSubject.asObservable(),this.isRequestPending=!1,this.requestSubject=new c.a}stateChanged(t){this.state=t.admin,this.stateSubject.next(t.admin),this.requestUpdate("state")}firstUpdated(){this.initEditor(),this.markdownChangeSub=this.markdownChangeSubject.asObservable().pipe(u(),f(()=>{this.isRequestPending=!0,this.requestUpdate("isRequestPending")}),y(300)).subscribe(t=>{B.a.dispatch(Object(K.q)(t)),this.updateChangeSubject.next()}),this.updateChangeSub=this.updateChangeSubject.asObservable().pipe(f(()=>{this.isRequestPending=!0,this.requestUpdate("isRequestPending")}),y(300)).subscribe(()=>{this.requestSubject.next();const{draft:t}=this.state;this.isDraft()?B.a.dispatch(Object(Q.l)(t)):B.a.dispatch(Object(Q.q)(t))}),this.requestSub=this.requestSubject.asObservable().pipe(Object(S.a)(this.state$),Object(j.a)(([,t])=>!t.isRequestPending)).subscribe(()=>this.isRequestPending=!1)}disconnectedCallback(){this.markdownChangeSub.unsubscribe(),this.requestSub.unsubscribe(),this.updateChangeSub.unsubscribe(),B.a.dispatch(Object(Q.k)())}isDraft(){return"string"!=typeof this.state.id}handleMarkdownChange(t){const e=this.state.editor.value();this.markdownChangeSubject.next(e)}handleFile(t){t.preventDefault();const e=t.target;if(e.files instanceof FileList){const t=e.files.item(0),{slug:s}=this.state.draft;B.a.dispatch(Object(Q.s)({slug:s,file:t})),this.state$.pipe((i=t=>t.isRequestPending,function(t){return t.lift(new $(i))}),u((t,e)=>t.draft.posterUrl!==e.draft.posterUrl),D(1)).subscribe(()=>this.updateChangeSubject.next())}var i}togglePublish(){const{draft:t}=this.state;t.published?B.a.dispatch(Object(K.o)()):B.a.dispatch(Object(K.y)()),this.updateChangeSubject.next()}handleTagsChange(t){B.a.dispatch(Object(K.u)(t.target.value)),this.updateChangeSubject.next()}handleTitleChange(t){B.a.dispatch(Object(K.v)(t.target.value)),this.updateChangeSubject.next()}handleMetaTitleChange(t){B.a.dispatch(Object(K.s)(t.target.value)),this.updateChangeSubject.next()}handleMetaDescriptionChange(t){B.a.dispatch(Object(K.r)(t.target.value)),this.updateChangeSubject.next()}handleLangChange(t){B.a.dispatch(Object(K.p)(t.target.value)),this.updateChangeSubject.next()}handleSlugChange(t){B.a.dispatch(Object(K.t)(t.target.value)),this.updateChangeSubject.next()}handleRemovePoster(){B.a.dispatch(Object(K.z)()),this.updateChangeSubject.next()}initEditor(){this.isDraft()?B.a.dispatch(Object(K.w)(this.shadowRoot.getElementById("markdown"),"")):this.state$.pipe(Object(j.a)(t=>!t.loading),D(1),E(1)).subscribe(t=>{B.a.dispatch(Object(K.w)(this.shadowRoot.getElementById("markdown"),t.draft.markdown))})}static get styles(){return[L.a,F.a,I.a,s.b`
        :host {
          display: block;
        }

        .loading {
          padding-top: 5rem;
          text-align: center;
          color: #4f4f4f;
          font-family: 'IBM Plex Sans', Cambria, sans-serif;
        }

        .error {
          padding: 6px 4px;
          background: #dd4646;
          color: #fff;
          border-radius: 4px;
          text-align: center;
        }

        .columns {
          display: flex;
          justify-content: center;
        }

        .is-half {
          width: 50%;
          max-width: 740px;
        }

        .is-one-third {
          width: 25%;
          max-width: 400px;
          margin-right: 1rem;
        }

        .draft-configuration {
          position: sticky;
          top: 16px;
          margin-top: 26px;
          font-family: 'IBM Plex Sans', Cambria, sans-serif;
        }

        .cm-comment {
          font-family: 'Fira Code', 'Fira Mono', monospace;
        }

        .poster {
          height: 400px;
          background-position: center center;
          background-size: cover;
          background-color: #eee;
        }

        .right {
          float: right;
        }

        button svg {
          fill: #17a917;
          width: 22px;
          margin-right: 6px;
        }

        .field .button {
          width: 100%;
        }

        .loader {
          float: right;
        }
      `]}render(){const t=this.isDraft()?null:`/article/${this.state.draft.slug}`,{loading:e}=this.state;return s.c`
      <link
        href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
        rel="stylesheet"
      />
      <link href="assets/css/simplemde.css" rel="stylesheet" />
      <link href="assets/css/debug-simplemde.css" rel="stylesheet" />

      <ez-navbar></ez-navbar>
      <form
        @change="${this.handleMarkdownChange}"
        @input="${this.handleMarkdownChange}"
        @keydown="${this.handleMarkdownChange}"
      >
        ${e?s.c`
              <div class="loading">
                Initialisation de l'espace temps, <br />
                chargement de la matrice quantique, <br />
                décomposition de la matière.
              </div>
            `:s.c`
              <div>
                ${this.state.draft.posterUrl?s.c`
                      <div
                        class="poster"
                        style="background-image: url('${this.state.draft.posterUrl}')"
                      ></div>
                    `:n.f}
                <div class="container">
                  <div class="columns section">
                    <div class="column is-one-third">
                      ${s.c`
                        <div class="draft-configuration card">
                          <div class="card-content">
                            <div class="field">
                              <label class="label" for="title"
                                >Title
                                ${this.isRequestPending?s.c`
                                      <span class="loader">⌛️</span>
                                    `:s.c`
                                      <span class="loader">👌</span>
                                    `}
                              </label>
                              <input
                                id="title"
                                name="title"
                                class="input"
                                value="${this.state.draft.title}"
                                @input="${this.handleTitleChange}"
                                type="text"
                                required
                              />
                            </div>
                            <div class="field">
                              <label class="label" for="slug">Slug</label>
                              <input
                                id="slug"
                                name="slug"
                                class="input"
                                value="${this.state.draft.slug||Object(A.a)(this.title)}"
                                @input="${this.handleSlugChange}"
                                type="text"
                                required
                              />
                            </div>
                            <div class="field">
                              <label class="label" for="tags">Tags</label>
                              <input
                                type="text"
                                class="input"
                                id="tags"
                                name="tags"
                                placeholder="architecture, test"
                                value="${this.state.draft.tags.toString()}"
                                @input="${this.handleTagsChange}"
                              />
                            </div>
                            <div class="field">
                              <label class="label" for="lang">Lang</label>
                              <div class="control">
                                <div class="select">
                                  <select required id="lang" @change="${this.handleLangChange}">
                                    ${[V.a.FR,V.a.EN].map(t=>s.c`
                                        <option
                                          value="${t}"
                                          ?selected="${t===this.state.draft.lang}"
                                          >${t}</option
                                        >
                                      `)}
                                  </select>
                                </div>
                              </div>
                            </div>
                            <div class="field">
                              <label class="label" for="poster">Poster</label>
                              <input
                                type="file"
                                id="poster"
                                class="input"
                                value="${this.state.draft.posterUrl}"
                                name="poster"
                                accept="image/png, image/jpeg, image/gif"
                                @input="${this.handleFile}"
                              />
                            </div>
                            <div class="field">
                              <button
                                class="button is-warning"
                                ?disabled=${!this.state.draft.posterUrl||this.isDraft()}
                                @click="${this.handleRemovePoster}"
                              >
                                Supprimer le poster
                              </button>
                            </div>
                            <div class="field">
                              <label class="label" for="title">Meta title</label>
                              <input
                                id="metaTitle"
                                name="metaTitle"
                                value="${this.state.draft.metaTitle||""}"
                                @input="${this.handleMetaTitleChange}"
                                class="input"
                                type="text"
                              />
                            </div>
                            <div class="field">
                              <label class="label" for="metaDescription">Meta description</label>
                              <input
                                id="metaDescription"
                                name="metaDescription"
                                @input="${this.handleMetaDescriptionChange}"
                                class="input"
                                value="${this.state.draft.metaDescription||""}"
                                type="text"
                              />
                            </div>
                            <div class="field">
                              <button
                                type="button"
                                class="button is-block"
                                @click="${()=>this.updateChangeSubject.next()}"
                              >
                                ✓ Sauvegarder
                              </button>
                            </div>
                            <div class="field">
                              <button
                                type="button"
                                class="button is-block ${this.state.draft.published?"is-warning":"is-info"}"
                                @click="${this.togglePublish}"
                                ?disabled=${this.isDraft()}
                              >
                                ${this.state.draft.published?"🔒 Dépublier":"🔓 Publier"}
                              </button>
                            </div>
                            <div class="field">
                              ${this.state.id?s.c`
                                    <a
                                      class="button is-primary is-block"
                                      href="${t}"
                                      title="Lire ${this.state.draft.title}"
                                      @click="${Object(a.a)(t)}"
                                    >
                                      👁 Prévisualisation
                                    </a>
                                  `:n.f}
                            </div>
                            ${this.state.error?s.c`
                                  <div class="field error">
                                    ${this.state.error}
                                  </div>
                                `:n.f}
                          </div>
                        </div>
                      `}
                    </div>
                    <div class="column is-half">
                      <h1 class="title">
                        ${this.state.draft.title}
                      </h1>
                      <textarea
                        id="markdown"
                        name="markdown"
                        type="text"
                        rows="20"
                        cols="70"
                      ></textarea>
                    </div>
                  </div>
                </div>
              </div>
            `}
      </form>
    `}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,