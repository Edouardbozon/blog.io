!function(t){function e(e){for(var a,o,s=e[0],c=e[1],l=e[2],u=0,p=[];u<s.length;u++)o=s[u],r[o]&&p.push(r[o][0]),r[o]=0;for(a in c)Object.prototype.hasOwnProperty.call(c,a)&&(t[a]=c[a]);for(d&&d(e);p.length;)p.shift()();return i.push.apply(i,l||[]),n()}function n(){for(var t,e=0;e<i.length;e++){for(var n=i[e],a=!0,s=1;s<n.length;s++){var c=n[s];0!==r[c]&&(a=!1)}a&&(i.splice(e--,1),t=o(o.s=n[0]))}return t}var a={},r={7:0},i=[];function o(e){if(a[e])return a[e].exports;var n=a[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.e=function(t){var e=[],n=r[t];if(0!==n)if(n)e.push(n[2]);else{var a=new Promise(function(e,a){n=r[t]=[e,a]});e.push(n[2]=a);var i,s=document.createElement("script");s.charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.src=function(t){return o.p+""+({0:"app-admin",1:"app-article",2:"app-articles-by-tag",3:"app-editor",4:"app-error",5:"app-home",6:"app-login",9:"vendors~app-article",10:"vendors~app-converter",11:"vendors~app-editor"}[t]||t)+".ff7e3b5fb167e7d0778a.js"}(t);var c=new Error;i=function(e){s.onerror=s.onload=null,clearTimeout(l);var n=r[t];if(0!==n){if(n){var a=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;c.message="Loading chunk "+t+" failed.\n("+a+": "+i+")",c.type=a,c.request=i,n[1](c)}r[t]=void 0}};var l=setTimeout(function(){i({type:"timeout",target:s})},12e4);s.onerror=s.onload=i,document.head.appendChild(s)}return Promise.all(e)},o.m=t,o.c=a,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)o.d(n,a,function(e){return t[e]}.bind(null,a));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o.oe=function(t){throw console.error(t),t};var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=e,s=s.slice();for(var l=0;l<s.length;l++)e(s[l]);var d=c;i.push(["/7QA",8]),n()}({"/7QA":function(t,e,n){"use strict";n.r(e);n("dJ3e"),n("la8K");var a=n("CQbg"),r=a.e`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 492.719 492.719" xml:space="preserve">
<g>
	<g id="Icons_18_">
		<path d="M492.719,166.008c0-73.486-59.573-133.056-133.059-133.056c-47.985,0-89.891,25.484-113.302,63.569    c-23.408-38.085-65.332-63.569-113.316-63.569C59.556,32.952,0,92.522,0,166.008c0,40.009,17.729,75.803,45.671,100.178    l188.545,188.553c3.22,3.22,7.587,5.029,12.142,5.029c4.555,0,8.922-1.809,12.142-5.029l188.545-188.553    C474.988,241.811,492.719,206.017,492.719,166.008z"/>
	</g>
</svg>`,i=n("gvQ4"),o=n("fccH"),s=n("uTus"),c=n("W2n+");customElements.define("ez-footer",class extends a.a{static get styles(){return a.b`
      footer {
        display: flex;
        align-items: center;
        justify-content: center;
        box-sizing: border-box;
        padding-top: 4rem;
        padding-bottom: 2rem;
        color: #313131;
        font-size: 0.75rem;
        font-family: 'IBM Plex Sans', sans-serif;
      }

      .heart svg {
        margin-left: 6px;
        margin-right: 6px;
        width: 14px;
        position: relative;
        top: 2px;
        fill: #df3e3e;
      }

      a {
        color: #222;
        text-decoration: none;
      }

      a:hover {
        text-decoration: underline;
      }
    `}render(){return a.c`
      <footer>
        <span>${Object(o.b)("footer.credentials")}</span>
        <a
          href="/admin"
          title="Zone privilégiée"
          @click=${Object(i.a)(s.a.authenticated?"/admin":"/login")}
        >
          <i class="heart">${r}</i>
        </a>
        ${Object(c.a)(Object(o.a)("footer.credentials2"))}
      </footer>
    `}});var l=a.e`<svg viewBox="0 0 1024 1024" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8C0 11.54 2.29 14.53 5.47 15.59C5.87 15.66 6.02 15.42 6.02 15.21C6.02 15.02 6.01 14.39 6.01 13.72C4 14.09 3.48 13.23 3.32 12.78C3.23 12.55 2.84 11.84 2.5 11.65C2.22 11.5 1.82 11.13 2.49 11.12C3.12 11.11 3.57 11.7 3.72 11.94C4.44 13.15 5.59 12.81 6.05 12.6C6.12 12.08 6.33 11.73 6.56 11.53C4.78 11.33 2.92 10.64 2.92 7.58C2.92 6.71 3.23 5.99 3.74 5.43C3.66 5.23 3.38 4.41 3.82 3.31C3.82 3.31 4.49 3.1 6.02 4.13C6.66 3.95 7.34 3.86 8.02 3.86C8.7 3.86 9.38 3.95 10.02 4.13C11.55 3.09 12.22 3.31 12.22 3.31C12.66 4.41 12.38 5.23 12.3 5.43C12.81 5.99 13.12 6.7 13.12 7.58C13.12 10.65 11.25 11.33 9.47 11.53C9.76 11.78 10.01 12.26 10.01 13.01C10.01 14.08 10 14.94 10 15.21C10 15.42 10.15 15.67 10.55 15.59C13.71 14.53 16 11.53 16 8C16 3.58 12.42 0 8 0Z" transform="scale(64)" fill="#ffffff"/>
</svg>`,d=a.e`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   version="1.1"
   viewBox="0 0 300.00006 244.18703">
  <g
     transform="translate(-539.17946,-568.85777)"
     id="layer1">
    <path
       id="path3611"
       style="fill:#1da1f2;fill-opacity:1;fill-rule:nonzero;stroke:none"
       d="m 633.89823,812.04479 c 112.46038,0 173.95627,-93.16765 173.95627,-173.95625 0,-2.64628 -0.0539,-5.28062 -0.1726,-7.90305 11.93799,-8.63016 22.31446,-19.39999 30.49762,-31.65984 -10.95459,4.86937 -22.74358,8.14741 -35.11071,9.62551 12.62341,-7.56929 22.31446,-19.54304 26.88583,-33.81739 -11.81284,7.00307 -24.89517,12.09297 -38.82383,14.84055 -11.15723,-11.88436 -27.04079,-19.31655 -44.62892,-19.31655 -33.76374,0 -61.14426,27.38052 -61.14426,61.13233 0,4.79784 0.5364,9.46458 1.58538,13.94057 -50.81546,-2.55686 -95.87353,-26.88582 -126.02546,-63.87991 -5.25082,9.03545 -8.27852,19.53111 -8.27852,30.73006 0,21.21186 10.79366,39.93837 27.20766,50.89296 -10.03077,-0.30992 -19.45363,-3.06348 -27.69044,-7.64676 -0.009,0.25652 -0.009,0.50661 -0.009,0.78077 0,29.60957 21.07478,54.3319 49.0513,59.93435 -5.13757,1.40062 -10.54335,2.15158 -16.12196,2.15158 -3.93364,0 -7.76596,-0.38716 -11.49099,-1.1026 7.78383,24.2932 30.35457,41.97073 57.11525,42.46543 -20.92578,16.40207 -47.28712,26.17062 -75.93712,26.17062 -4.92898,0 -9.79834,-0.28036 -14.58427,-0.84634 27.05868,17.34379 59.18936,27.46396 93.72193,27.46396" />
  </g>
</svg>`;customElements.define("ez-navbar",class extends a.a{constructor(){super(...arguments),this.twitterUrl="https://twitter.com/edouardbozon",this.githubUrl="https://github.com/edouardbozon"}static get styles(){return a.b`
      :host {
        display: block;
      }

      nav {
        height: 64px;
        padding: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-sizing: border-box;
        color: rgb(180, 180, 180);
        background: rgb(34, 34, 34);
        font-family: 'IBM Plex Sans', sans-serif;
      }

      h1 {
        margin: 0;
        font-size: 1.4rem;
      }

      svg {
        display: inline-block;
        width: 24px;
        height: 24px;
      }

      .logo-btn {
        color: rgb(180, 180, 180);
        text-decoration: none;
        display: flex;
        align-items: center;
      }

      .socials a {
        padding-left: 1rem;
      }

      .logo {
        width: 42px;
        height: 42px;
        border-radius: 50%;
        margin-right: 12px;
      }
    `}render(){return a.c`
      <nav>
        <a href="/" @click=${Object(i.a)("/")} class="logo-btn">
          <img src="/assets/images/portrait.jpg" class="logo" />
          Codamit - Tech Blog
        </a>
        <span class="socials">
          <a title="Github profile" href="${this.githubUrl}">${l}</a>
          <a title="Twitter profile" href="${this.twitterUrl}">${d}</a>
        </span>
      </nav>
    `}});var u=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};class p extends a.a{constructor(){super(...arguments),this.navbar=!0}static get styles(){return a.b`
      .page-wrapper {
        max-width: 780px !important;
        margin: 0 auto;
      }
    `}render(){return a.c`
      ${this.navbar?a.c`
            <ez-navbar></ez-navbar>
          `:a.c``}
      <main class="page-wrapper"><slot></slot></main>
      <ez-footer></ez-footer>
    `}}(function(t,e,n,a){var r,i=arguments.length,o=i<3?e:null===a?a=Object.getOwnPropertyDescriptor(e,n):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,a);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(o=(i<3?r(o):i>3?r(e,n,o):r(e,n))||o);i>3&&o&&Object.defineProperty(e,n,o)})([Object(a.d)({type:Boolean}),u("design:type",Object)],p.prototype,"navbar",void 0),customElements.define("ez-page",p);var f=n("NAv5"),g=n("AaG5"),h=n("2Fb8"),b=n("QQaa"),m=n("pS3t"),y=a.e`
<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 594.149 594.149"
	 xml:space="preserve">
<g>
	<g>
		<path d="M448.8,161.925l-35.7-35.7l-160.65,160.65l35.7,35.7L448.8,161.925z M555.899,126.225l-267.75,270.3l-107.1-107.1
			l-35.7,35.7l142.8,142.8l306-306L555.899,126.225z M0,325.125l142.8,142.8l35.7-35.7l-142.8-142.8L0,325.125z"/>
	</g>
</g>
</svg>
`,O=n("CKJH"),j=n("azgF"),w=n("SEiY"),v=n("6iyJ"),x=function(t,e,n,a){var r,i=arguments.length,o=i<3?e:null===a?a=Object.getOwnPropertyDescriptor(e,n):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,a);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(o=(i<3?r(o):i>3?r(e,n,o):r(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},A=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};class C extends a.a{constructor(){super(...arguments),this.tags=[],this.adminMode=!1,this.articleCollection=[],this.loading=!0,this.page=1,this.limit=4,this.articleRemaining=!0}static get styles(){return[v.a,b.a,a.b`
        :host {
          display: block;
        }

        .subtitle {
          text-transform: uppercase;
          font-family: 'IBM Plex Sans Condensed', sans-serif;
        }

        .tag.is-primary {
          height: 32px;
          line-height: 32px;
          font-size: 1rem;
          background: #40a8ff;
          color: #fff;
          transition: none;
          border-radius: 8px;
        }

        .tag.is-primary:hover {
          background: #40a8ff;
        }

        .poster {
          height: 200px;
          margin: 0;
          background-color: #eee;
          background-size: cover;
          background-position: center center;
          background-repeat: no-repeat;
          transition: 150ms ease;
        }

        .left {
          margin-right: 12px;
          font-weight: 200;
          text-transform: capitalize;
        }

        .left:not(.lang) {
          font-size: 0.9rem;
        }

        .lang {
          font-size: 0.9rem;
          margin-right: 4px;
        }

        .load-complete svg {
          margin-top: 4px;
          width: 24px;
          fill: #666;
        }

        .feed-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 1.5rem;
        }

        .feed-header h4 {
          margin: 0;
        }

        .feed-header .tag {
          text-transform: capitalize;
        }

        @media screen and (max-width: 800px) {
          .section {
            padding: 1rem 0.8rem;
          }
        }
      `]}firstUpdated(){this.updateArticleCollection()}updated(t){const e=t.get("tags");e instanceof Array&&e!==this.tags&&this.updateArticleCollection()}updateArticleCollection(){this.getArticleCollection().then(t=>{const{collection:e,total:n}=t;this.articleCollection=e,this.articleRemaining=n>this.articleCollection.length,this.loading=!1,this.requestUpdate()})}getArticleCollection(){return this.adminMode?O.a.get(encodeURI(`/api/v1/draft?sortDir=-1&sortBy=_id&limit=${this.limit}&page=${this.page}`)):O.a.get(encodeURI(`/api/v1/article?sortDir=-1&sortBy=_id&limit=${this.limit}&page=${this.page}${this.tags.map(t=>"&tags[]="+t).toString().replace(",","")}`))}deleteArticle(t){return O.a.delete(`/api/v1/article/${t}`)}stripTagsAndTruncate(t){return t.replace(/<\/?[^>]+(>|$)/g,"").slice(0,180)}async loadMore(){if(!this.articleRemaining)return Promise.reject("All article are already loaded");this.loading=!0,++this.page;const{collection:t,total:e}=await this.getArticleCollection();this.articleCollection=[...this.articleCollection,...t],this.articleRemaining=e>this.articleCollection.length,this.loading=!1,this.requestUpdate()}async removeArticle(t){const e=t.title;if((prompt("Enter "+e+" to delete the article")||"").toLowerCase()===e.toLowerCase())try{await this.deleteArticle(t._id),this.articleCollection=(this.articleCollection||[]).filter(e=>t._id!==e._id),this.requestUpdate()}catch(t){j.a.throw(t)}}articleList(){return a.c`
      ${Object(h.a)(this.articleCollection,t=>{const e=`/article/${t.slug}`;return a.c`
          <a
            class="card-link"
            href="${e}"
            title="${Object(o.b)("article_feed.read")} ${t.title}"
            @click="${Object(i.a)(e)}"
          >
            <article class="card">
              <header class="card-header">
                <p class="card-header-inner">
                  <span class="left">
                    <span class="lang">[${t.lang.toUpperCase()}]</span>
                    ${t.published?Object(f.format)(new Date(t.publishedAt),"dddd DD MMMM YYYY",{locale:w.a.dateFnsLocale}):g.f}
                  </span>
                  ${Object(m.a)(t,this.adminMode)}
                </p>
              </header>
              ${t.posterUrl?a.c`
                    <figure
                      class="poster card-image"
                      style="background-image: url('${t.posterUrl}')"
                    ></figure>
                  `:g.f}
              <div class="card-content">
                <h3 class="title">${t.title}</h3>
                <p>${this.stripTagsAndTruncate(t.html)+"..."}</p>
              </div>

              ${this.adminMode?a.c`
                    <footer class="card-footer">
                      <a
                        class="card-footer-item"
                        href="${`/admin/draft?id=${t._id}`}"
                        title="${Object(o.b)("article_feed.edit")} ${t.title}"
                        @click="${Object(i.a)(`/admin/draft?id=${t._id}`)}"
                      >
                        ${Object(o.b)("article_feed.edit")}
                      </a>
                      <a
                        class="card-footer-item"
                        type="button"
                        title="${Object(o.b)("article_feed.remove")} ${t.title}"
                        @click="${this.removeArticle.bind(this,t)}"
                      >
                        ${Object(o.b)("article_feed.remove")}
                      </a>
                    </footer>
                  `:g.f}
            </article>
          </a>
        `})}
    `}render(){return a.c`
      <section class="section">
        <header class="feed-header">
          <h4 class="subtitle">articles</h4>
          ${this.tags.length>0?a.c`
                <span class="tag is-primary is-medium">${this.tags[0]}</span>
              `:g.f}
        </header>
        ${this.articleCollection?this.articleList():g.f}
        <button
          title="${Object(o.b)("article_feed.more")}"
          class="button load-more ${this.loading?"is-loading":""}"
          ?disabled="${!this.articleRemaining}"
          @click="${this.loadMore}"
        >
          ${this.articleRemaining?Object(o.b)("article_feed.more"):a.c`
                <span class="load-complete">${y}</span>
              `}
        </button>
      </section>
    `}}x([Object(a.d)({type:Array}),A("design:type",Object)],C.prototype,"tags",void 0),x([Object(a.d)({type:Boolean}),A("design:type",Object)],C.prototype,"adminMode",void 0),x([Object(a.d)({type:Array}),A("design:type",Array)],C.prototype,"articleCollection",void 0),x([Object(a.d)({type:Boolean}),A("design:type",Object)],C.prototype,"loading",void 0),customElements.define("ez-article-feed",C)},"1u1/":function(t,e,n){var a={"./en.json":["0i01",12],"./fr.json":["7SZz",13]};function r(t){if(!n.o(a,t))return Promise.resolve().then(function(){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e});var e=a[t],r=e[0];return n.e(e[1]).then(function(){return n.t(r,3)})}r.keys=function(){return Object.keys(a)},r.id="1u1/",t.exports=r},"5W9+":function(t,e,n){"use strict";var a=n("ANjH"),r=n("5HXA"),i=n("1mXj"),o=n("lk2u"),s=n("moZ3"),c=n("jOth"),l=n("0/uQ"),d=n("F/XL"),u=n("15JJ"),p=n("67Y/"),f=n("9Z1F"),g=n("dJ3e");const h="[ALL] FAILURE",b=t=>({type:h,payload:t});var m=n("YpuI");const y=Object(s.a)(t=>t.pipe(Object(c.a)(m.d),Object(u.a)(t=>Object(l.a)(g.a.get(`/api/v1/article/${t.payload}`)).pipe(Object(p.a)(t=>Object(m.o)(t)),Object(f.a)(t=>Object(d.a)(b(t)))))),t=>t.pipe(Object(c.a)(m.b),Object(u.a)(t=>Object(l.a)(g.a.post("/api/v1/article",t.payload)).pipe(Object(p.a)(t=>Object(m.m)(t)),Object(f.a)(t=>Object(d.a)(b(t)))))),t=>t.pipe(Object(c.a)(m.g),Object(u.a)(t=>Object(l.a)(g.a.put(`/api/v1/article/${t.payload._id}`,t.payload)).pipe(Object(p.a)(t=>Object(m.r)(t)),Object(f.a)(t=>Object(d.a)(b(t)))))),t=>t.pipe(Object(c.a)(m.f),Object(u.a)(t=>Object(l.a)(g.a.delete(`/api/v1/article/${t.payload._id}`)).pipe(Object(p.a)(()=>Object(m.p)(t.payload)),Object(f.a)(t=>Object(d.a)(b(t)))))),t=>t.pipe(Object(c.a)(m.i),Object(u.a)(({payload:{slug:t,file:e}})=>Object(l.a)(g.e.upload(t,e)).pipe(Object(p.a)(t=>Object(m.t)(t.path)),Object(f.a)(t=>Object(d.a)(b(t)))))));var O=n("/PH2"),j=n("tSTB"),w=n("fhiS");const v=Object(l.a)(Promise.all([n.e(11),n.e(3)]).then(n.t.bind(null,"6/sb",7))),x=Object(l.a)(n.e(10).then(n.t.bind(null,"M55E",7))),A=Object(s.a)((t,e)=>t.pipe(Object(c.a)(w.j),Object(u.a)(({payload:{element:t,initialValue:n}})=>v.pipe(Object(O.a)(e),Object(p.a)(([e,a])=>Object(w.x)(new e.default(((t,e,n)=>({element:t,initialValue:e,lineWrapping:!0,spellChecker:n.admin.draft.lang===j.a.EN,autoDownloadFontAwesome:!0,forceSync:!0,tabSize:2,autofocus:!0}))(t,n,a)))),Object(f.a)(t=>Object(d.a)(b(t)))))),t=>t.pipe(Object(c.a)(w.d),Object(u.a)(({payload:t})=>x.pipe(Object(p.a)(e=>{const n=new e.default.Converter;return Object(w.n)(n.makeHtml(t))}),Object(f.a)(t=>Object(d.a)(b(t))))))),C=Object(s.a)(y,A),T=Object(s.a)(C);var E=n("ibZA");const D={types:{heart:{count:0},unicorn:{count:0},mark:{count:0}}},_=()=>({id:null,editor:null,draft:{title:"Brouillon",slug:"brouillon",markdown:"",html:"",tags:[],posterUrl:null,published:!1,publishedAt:null,metaTitle:null,metaDescription:null,lang:j.a.FR,reactions:D},error:null,loading:!1,isRequestPending:!1});const $=Object(a.combineReducers)({client:function(t={},e){return e.type,t},admin:function(t=_(),e){switch(e.type){case m.d:return Object.assign({},t,{id:e.payload,loading:!0});case m.e:return Object.assign({},t,{draft:e.payload,loading:!1});case m.i:case m.b:case m.g:return Object.assign({},t,{isRequestPending:!0});case m.j:return Object.assign({},t,{draft:Object.assign({},t.draft,{posterUrl:e.payload})});case m.c:return Object.assign({},t,{draft:e.payload,isRequestPending:!1,error:null,id:e.payload._id});case m.h:return Object.assign({},t,{isRequestPending:!1,error:null});case w.d:return Object.assign({},t,{draft:Object.assign({},t.draft,{markdown:e.payload})});case w.a:return Object.assign({},t,{draft:Object.assign({},t.draft,{html:e.payload})});case w.k:return Object.assign({},t,{editor:e.payload});case w.i:return Object.assign({},t,{draft:Object.assign({},t.draft,{title:e.payload.trim()})});case w.f:return Object.assign({},t,{draft:Object.assign({},t.draft,{metaTitle:e.payload.trim()})});case w.e:return Object.assign({},t,{draft:Object.assign({},t.draft,{metaDescription:e.payload.trim()})});case w.g:return Object.assign({},t,{draft:Object.assign({},t.draft,{slug:Object(E.a)(e.payload)})});case w.c:return Object.assign({},t,{draft:Object.assign({},t.draft,{lang:e.payload})});case w.h:return Object.assign({},t,{draft:Object.assign({},t.draft,{tags:e.payload.split(",")})});case w.l:return Object.assign({},t,{draft:Object.assign({},t.draft,{published:!0,publishedAt:(new Date).toString()})});case w.b:return Object.assign({},t,{draft:Object.assign({},t.draft,{published:!1,publishedAt:null})});case m.a:return Object.assign({},t,{draft:_().draft,editor:null,error:null,id:null});case w.m:return Object.assign({},t,{draft:Object.assign({},t.draft,{posterUrl:null})});case h:return Object.assign({},t,{error:e.payload,loading:!1,isRequestPending:!1});default:return t}}});n.d(e,"a",function(){return R});const M=Object(o.a)(),S=[M,i.logger];const R=function(){const t=Object(a.createStore)($,Object(r.composeWithDevTools)(Object(a.applyMiddleware)(...S)));return M.run(T),t}()},"6iyJ":function(t,e,n){"use strict";n.d(e,"a",function(){return a});const a=n("CQbg").b`
  .card-link {
    display: block;
    margin-bottom: 1.5rem;
    color: #222;
    text-decoration: none;
  }

  .card {
    border: 1px solid #eee;
    border-radius: 8px;
    transition: 150ms ease;
  }

  .card:hover {
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.08);
  }

  .card:last-child {
    margin-bottom: 0;
  }

  .card-header {
    font-family: 'IBM Plex Sans Condensed', sans-serif;
  }

  .card-header-inner {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    margin: 0;
  }

  .card-header,
  .card-content,
  .card-footer {
    padding: 12px;
  }

  @media screen and (max-width: 800px) {
    .card-header-inner .left {
      margin-bottom: 4px;
    }
  }
`},CKJH:function(t,e,n){"use strict";n.d(e,"a",function(){return r});var a=n("uKyb");const r=new class{constructor(t){this.baseUrl=t,this.token=null,this.options={mode:"cors",headers:{"Content-Type":"application/json"}}}async get(t){try{return(await Object(a.b)(this.baseUrl+t,Object.assign({},this.getOptions(),{method:"GET"}))).json()}catch(e){const n=await caches.match(this.baseUrl+t);if(n)return n.json()}return Promise.reject("Something went wrong when getting "+t)}async post(t,e){return(await Object(a.b)(this.baseUrl+t,Object.assign({},this.getOptions(),{method:"POST",body:JSON.stringify(Object.assign({},e))}))).json()}async put(t,e){return(await Object(a.b)(this.baseUrl+t,Object.assign({},this.getOptions(),{method:"PUT",body:JSON.stringify(Object.assign({},e))}))).json()}async delete(t){return(await Object(a.b)(this.baseUrl+t,Object.assign({},this.getOptions(),{method:"DELETE"}))).json()}authenticateRequests(t){this.token=t}deAuthenticateRequests(){this.token=null}getOptions(){const t=this.options;if("string"==typeof this.token){const e=new Headers(t.headers);e.set("Authorization",`Bearer ${this.token}`),t.headers=e}return t}}("https://api.codamit.com")},QQaa:function(t,e,n){"use strict";n.d(e,"a",function(){return a});const a=n("CQbg").b`
  .button {
    font-family: 'IBM Plex Sans Condensed', sans-serif;
    font-size: 0.9rem;
    color: #222;
    text-decoration: none;
    text-align: center;
    display: block;
    width: 100%;
    height: 36px;
    line-height: 36px;
    margin-top: 10px;
    border: 1px solid #eee;
    border-radius: 4px;
    background: transparent;
    cursor: pointer;
    color: #222;
    font-size: 0.8rem;
    transition: 150ms ease;
  }

  .button:hover {
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.08);
  }

  .button:focus {
    outline: none;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.08);
  }

  .button[disabled] {
    color: #666;
    cursor: initial;
  }

  .button[disabled]:hover {
    outline: none;
    box-shadow: none;
  }
`},SEiY:function(t,e,n){"use strict";n.d(e,"a",function(){return o});var a=n("Us+F"),r=n("LKA2"),i=n("azgF");const o=new class{constructor(){this.default="en",this.languageLoaded=!1,this.loadLangMiddleware=async(t,e,n)=>{await this.loadLang(),n()};const t=navigator.language.split("-")[0];this.lang=t.match(/[en|fr]/)?t:this.default}get dateFnsLocale(){return this._dateFnsLocale}translate(t){this.languageLoaded||i.a.throw("Trying to translate at path "+t.toString()+" but language was not loaded");const e=t.reduce((t,e)=>t&&t[e]?t[e]:null,this._translation);return"string"!=typeof e&&console.warn(`Translation not found at path "${t.join(".")}"`),e}getLang(){return this.lang}async loadLang(){try{const t=await n("1u1/")(`./${this.lang}.json`);this._translation=t,this._dateFnsLocale="fr"===this.lang?r:a,this.languageLoaded=!0}catch(t){i.a.throw(t)}}}},YpuI:function(t,e,n){"use strict";n.d(e,"a",function(){return a}),n.d(e,"d",function(){return r}),n.d(e,"e",function(){return i}),n.d(e,"b",function(){return o}),n.d(e,"c",function(){return s}),n.d(e,"g",function(){return c}),n.d(e,"h",function(){return l}),n.d(e,"f",function(){return d}),n.d(e,"i",function(){return u}),n.d(e,"j",function(){return p}),n.d(e,"k",function(){return f}),n.d(e,"n",function(){return g}),n.d(e,"o",function(){return h}),n.d(e,"l",function(){return b}),n.d(e,"m",function(){return m}),n.d(e,"q",function(){return y}),n.d(e,"r",function(){return O}),n.d(e,"p",function(){return j}),n.d(e,"s",function(){return w}),n.d(e,"t",function(){return v});const a="[ADMIN] CLEAR_DRAFT",r="[ADMIN] LOAD_DRAFT",i="[ADMIN] LOAD_DRAFT_SUCCESS",o="[ADMIN] CREATE_DRAFT",s="[ADMIN] CREATE_DRAFT_SUCCESS",c="[ADMIN] UPDATE_DRAFT",l="[ADMIN] UPDATE_DRAFT_SUCCESS",d="[ADMIN] REMOVE_DRAFT",u="[ADMIN] UPLOAD_POSTER",p="[ADMIN] UPLOAD_POSTER_SUCCESS",f=()=>({type:a}),g=t=>({type:r,payload:t}),h=t=>({type:i,payload:t}),b=t=>({type:o,payload:t}),m=t=>({type:s,payload:t}),y=t=>({type:c,payload:t}),O=t=>({type:l,payload:t}),j=t=>({type:"[ADMIN] REMOVE_DRAFT_SUCCESS",payload:t}),w=({slug:t,file:e})=>({type:u,payload:{slug:t,file:e}}),v=t=>({type:p,payload:t})},azgF:function(t,e,n){"use strict";n.d(e,"a",function(){return i});var a=n("3CEA"),r=n("WSEr");const i=new class{constructor(){this.error=null,a.a({dsn:"https://47dc0f3309cb456b874afc36d3df16aa@sentry.io/1316181",integrations:[new r.a.Breadcrumbs({console:!0,dom:!0,fetch:!0,history:!0,sentry:!0,xhr:!0})]})}throw(t){throw t instanceof Error||(t=new Error(t)),this.error=t,t}getLastError(){return this.error}}},dJ3e:function(t,e,n){"use strict";var a=n("CKJH"),r=n("EcEN"),i=n("uKyb");class o{constructor(){this.authToken="_iubYyXWCr8AAAAAAAAQ_t5kuaNjNfRy0fxRq8j3ZFE5wOa05vf0eQUzcQm92qFl",this.baseUrl="https://content.dropboxapi.com/2",this.shareBaseUrl="https://api.dropboxapi.com/2"}async upload(t="draft",e){const n=o.getExtname(e.name),a="/posters/article_"+t+"__"+Object(r.v1)().slice(0,5)+"."+n,s=this.baseUrl+"/files/upload",c={path:a,mode:"add",autorename:!1,mute:!1,strict_conflict:!1};this.validate(n),await Object(i.a)(s,{method:"POST",body:e.slice(0,e.size),headers:{"Content-Type":"application/octet-stream",Authorization:"Bearer "+this.authToken,"Dropbox-API-Arg":JSON.stringify(c)}});const l=await Object(i.a)(this.shareBaseUrl+"/sharing/create_shared_link_with_settings",{method:"POST",headers:{Authorization:"Bearer "+this.authToken,"Content-Type":"application/json"},body:JSON.stringify({path:a,settings:{requested_visibility:"public"}})});return{path:(await l.json()).url.split("?")[0]+"?dl=1"}}async validate(t){return t?["jpg","png","jpeg","gif"].includes(t)?void 0:Promise.reject("Unsupported MIME-Type"):Promise.reject("No extension file found")}static getExtname(t){return t.split(".").pop()}}const s=new o;n("uTus");var c=n("azgF"),l=n("SEiY");const d=new class{constructor(){this.scrollMap=new Map,this.RESTORATION_DELAY=800,this.registerScrollPosition=(t,e,n)=>{"/"===window.location.pathname&&this.scrollMap.set(window.location.pathname,window.scrollY),n()},this.restoreScrollPosition=t=>{const{newPath:e}=t;if(window.clearTimeout(this.restorationRef),this.scrollMap.has(e)){const t=this.scrollMap.get(e);this.scrollMap.delete(e),this.restorationRef=window.setTimeout(()=>{window.scroll({top:t})},this.RESTORATION_DELAY)}else window.scroll({top:0})},"scrollRestoration"in history&&(history.scrollRestoration="manual")}};n.d(e,"a",function(){return a.a}),n.d(e,"e",function(){return s}),n.d(e,"b",function(){return c.a}),n.d(e,"c",function(){return l.a}),n.d(e,"d",function(){return d})},fccH:function(t,e,n){"use strict";n.d(e,"a",function(){return i}),n.d(e,"b",function(){return o});var a=n("AaG5"),r=n("SEiY");const i=t=>r.a.translate(t.split(".")),o=Object(a.d)(t=>e=>{e.setValue(i(t))})},fhiS:function(t,e,n){"use strict";n.d(e,"j",function(){return a}),n.d(e,"k",function(){return r}),n.d(e,"d",function(){return i}),n.d(e,"a",function(){return o}),n.d(e,"i",function(){return s}),n.d(e,"f",function(){return c}),n.d(e,"e",function(){return l}),n.d(e,"c",function(){return d}),n.d(e,"g",function(){return u}),n.d(e,"h",function(){return p}),n.d(e,"l",function(){return f}),n.d(e,"b",function(){return g}),n.d(e,"m",function(){return h}),n.d(e,"w",function(){return b}),n.d(e,"x",function(){return m}),n.d(e,"q",function(){return y}),n.d(e,"n",function(){return O}),n.d(e,"v",function(){return j}),n.d(e,"u",function(){return w}),n.d(e,"s",function(){return v}),n.d(e,"r",function(){return x}),n.d(e,"p",function(){return A}),n.d(e,"t",function(){return C}),n.d(e,"y",function(){return T}),n.d(e,"o",function(){return E}),n.d(e,"z",function(){return D});const a="[ADMIN] LOAD_EDITOR",r="[ADMIN] LOAD_EDITOR_SUCCESS",i="[ADMIN] EDIT_MARKDOWN",o="[ADMIN] CONVERT_MD_TO_HTML",s="[ADMIN] EDIT_TITLE",c="[ADMIN] EDIT_META_TITLE",l="[ADMIN] EDIT_META_DESCRIPTION",d="[ADMIN] EDIT_LANG",u="[ADMIN] EDIT_SLUG",p="[ADMIN] EDIT_TAGS",f="[ADMIN] PUBLISH",g="[ADMIN] DE_PUBLISH",h="[ADMIN] REMOVE_POSTER",b=(t,e)=>({type:a,payload:{element:t,initialValue:e}}),m=t=>({type:r,payload:t}),y=t=>({type:i,payload:t}),O=t=>({type:o,payload:t}),j=t=>({type:s,payload:t}),w=t=>({type:p,payload:t}),v=t=>({type:c,payload:t}),x=t=>({type:l,payload:t}),A=t=>({type:d,payload:t}),C=t=>({type:u,payload:t}),T=()=>({type:f}),E=()=>({type:g}),D=()=>({type:h})},gvQ4:function(t,e,n){"use strict";n.d(e,"a",function(){return r});var a=n("la8K");const r=(t,e={})=>n=>{n&&(n.preventDefault(),n.stopPropagation()),a.b.push(t+i(e))},i=(t={})=>Object.entries(t).reduce((t,[e,n],a)=>0===a?`?${e}=${n}`:`${t}&${e}=${n}`,"")},ibZA:function(t,e,n){"use strict";function a(t){const e="àáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ",n=new RegExp(e.split("").join("|"),"g");return t.toString().toLowerCase().replace(n,t=>"aaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh".charAt(e.indexOf(t))).replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/^-+/,"").replace(/-+$/,"")}n.d(e,"a",function(){return a})},la8K:function(t,e,n){"use strict";var a=n("1Vzc"),r=n("dJ3e"),i=n("AaG5");const o=()=>n.e(0).then(n.bind(null,"RWR+"));var s=n("5W9+"),c=n("YpuI");const l=Object(a.routerGroup)().use("/",async(t,e)=>{await o(),Object(i.h)(i.e`
        <ez-admin></ez-admin>
      `,p),e.end()}).use("/draft",async(t,e)=>{await o(),t.query.id&&s.a.dispatch(Object(c.n)(t.query.id)),Object(i.h)(i.e`
        <ez-draft></ez-draft>
      `,p),e.end()});var d=n("azgF");const u=Object(a.routerGroup)().use("/",async(t,e)=>{await(()=>n.e(5).then(n.bind(null,"RN0W")))(),Object(i.h)(i.e`
        <ez-home></ez-home>
      `,p),e.end()}).use("/login",async(t,e)=>{await(()=>n.e(6).then(n.bind(null,"KNVF")))(),Object(i.h)(i.e`
        <ez-login></ez-login>
      `,p),e.end()}).use("/article/:slug",async(t,e)=>{await(()=>Promise.all([n.e(9),n.e(1)]).then(n.bind(null,"wM92")))();const a=t.params.slug;Object(i.h)(i.e`
        <ez-article-detail slug="${a}"></ez-article-detail>
      `,p),e.end()}).use("/tag/:tag",async(t,e)=>{await(()=>n.e(2).then(n.bind(null,"XXmt")))();const a=t.params.tag;Object(i.h)(i.e`
        <ez-article-feed-by-tag tag=${a}></ez-article-feed-by-tag>
      `,p),e.end()}).use("/error",async(t,e)=>{if(await(()=>n.e(4).then(n.bind(null,"cU3v")))(),null===d.a.getLastError())return f.push("/"),void e.end();Object(i.h)(i.e`
        <ez-error message="${d.a.getLastError()}"></ez-error>
      `,p),e.end()});n.d(e,"a",function(){return p}),n.d(e,"b",function(){return f});const p=document.getElementById("app"),f=Object(a.browserRouter)();f.use("*",r.d.registerScrollPosition).use("*",r.c.loadLangMiddleware).use("",u).use("/admin",l).use("*",(t,e)=>{r.b.throw("Page not found at path "+t.path),f.push("/error"),e.end()}).listen(),f.on("navigation",r.d.restoreScrollPosition)},pS3t:function(t,e,n){"use strict";n.d(e,"a",function(){return i});var a=n("CQbg"),r=n("gvQ4");const i=(t,e=!1)=>a.c`
  <style>
    .tag {
      margin-right: 4px;
      text-transform: capitalize;
      font-family: 'IBM Plex Sans', sans-serif;
      display: inline-block;
      background: #eee;
      font-size: 0.74rem;
      padding: 0px 4px;
      border-radius: 6px;
      border: 1px solid #eee;
      line-height: 22px;
      color: #222;
      text-decoration: none;
      transition: 150ms ease;
    }

    .tag:before {
      content: '#';
    }

    .tag:hover {
      border: 1px solid #eee;
      background: #fff;
    }

    .tag:last-child {
      margin-right: 0;
    }

    .tag-wrapper {
      line-height: 28px;
    }
  </style>
  <span class="tag-wrapper">
    ${t.tags.map(t=>a.c`
          <a
            href="/tag/${t}"
            ?title=${t+" articles"}
            @click="${Object(r.a)(`/tag/${t}`)}"
            class="tag is-light"
          >
            ${t}
          </a>
        `)}
    ${e?a.c`
          <span class="tag ${t.published?"is-primary":"is-warning"}">
            ${t.published?"published":"draft"}
          </span>
        `:""}
  </span>
`},tSTB:function(t,e,n){"use strict";var a;n.d(e,"a",function(){return a}),function(t){t.FR="fr",t.EN="en"}(a||(a={}))},uKyb:function(t,e,n){"use strict";async function a(t){if(!t.ok){let e=t.statusText;try{let n=await t.json();n.error.message&&(e=n.error.message)}catch(t){console.error(t)}throw Error(e)}return t}async function r(t,e){return await fetch(t,e).then(a)}n.d(e,"a",function(){return r}),e.b=r},uTus:function(t,e,n){"use strict";n.d(e,"a",function(){return i});var a=n("CKJH");const r="authorization";const i=new class{constructor(){this.authenticated=!1;const t=this.getCookie(r);t&&(this.login(t),a.a.get("/api/v1/user/me").then(t=>{this.setUser(t)}).catch(()=>{this.logout()}))}login(t){this.createCookie(r,t),a.a.authenticateRequests(t),this.authenticated=!0}logout(){a.a.deAuthenticateRequests(),this.removeCookie(r),this.authenticated=!1,this.user=null}setUser(t){this.user=t}createCookie(t,e){this.removeCookie(t);let n=`${t}=`+e;n+=";max-age="+604800..toString()+";",document.cookie=n}removeCookie(t){document.cookie=t+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;"}getCookie(t){return(("; "+document.cookie).split("; "+t+"=").pop()||"").split(";").shift()}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,